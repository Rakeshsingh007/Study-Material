def BinarySearch(list,ele):
   lower = 0
   upper = len(list)-1
   while lower<=upper:
       mid = (lower + upper) // 2
       if list[mid] == ele:
           return mid
       else:
           if list[mid]>ele:
                upper=mid-1
           else:
                lower=mid+1
   return -1

print(BinarySearch([1,2,3,4,5,7,8,9,],69))

Worst case: Θ(log n).
Best case: Θ(1).
Average case for a random array: Θ(log n)
"Almost sorted" case: Θ(n).

-----------------------------------------------------------------------------------
								InsertionSort
-----------------------------------------------------------------------------------
def InsertionSort(list):
    for index in range(1,len(list)):
        while list[index]<list[index-1] and index>0:
            list[index],list[index-1]=list[index-1],list[index]
            index=index-1
    return list

print(InsertionSort([64,25,12,22,100,5,6,333,4,2,5,6,1,2,3,4,6,3,9,1,3,5,3,5,11]))

Worst case: Θ(n2).
Best case: Θ(n).
Average case for a random array: Θ(n2)
"Almost sorted" case: Θ(n).


-----------------------------------------------------------------------------------
								BubbleSort
-----------------------------------------------------------------------------------

def BubbleSort(list):
	flag = False
	for i in range(len(list) - 1):
		for j in range(len(list) - 1 - i):
			if list[j]>list[j+1]:
				list[j],list[j + 1] =list[j+1],list[j]
				flag = True
		if not flag:
			break
	return list
print(BubbleSort([1,12,3,4,5]))

-----------------------------------------------------------------------------------
								SelectionSort
-----------------------------------------------------------------------------------

def SelectionSort(list):
	for i in range(len(list)-1):
		minindex = i
		for j in range(i+1,len(list)):
			if list[j]<list[minindex]:
				minindex=j
		if minindex!=i:
			list[i],list[minindex]=list[minindex],list[i]
	return list
print(SelectionSort([1,2,4,1,3,5,32,3,4,2]))


class Queue:
    def __init__(self):
        from collections import deque
        self.queue= deque([])
    def pop(self):
        if len(self.queue)>0:
            self.queue.popleft()
        else:
            print("Queue is empty")
    def push(self,element):
        self.queue.append(element)
    def view(self):
        print(self.queue)

queue = Queue()
queue.pop()
queue.push(34)
queue.view()







class Stack:
	def __init__(self):
		self.stack=[]

	def push(self,ele):
		self.stack.append(ele)

	def pop(self):
		if len(self.stack)>0:
			self.stack.pop()
		else:
			print("Can not pop empty list")
	def view(self):
		print(self.stack)

s = Stack()



class Queue:
	def __init__(self):
		self.queue=[]

	def push(self,ele):
		self.queue.append(ele)

	def pop(self):
		if len(self.queue)>0:
			self.queue.pop(0)
		else:
			print("Queue is empty")
	def view(self):
		print(self.queue)

s = Queue()
s.push(2)
s.push(3)
s.push(4)
s.push(5)
s.push(6)
s.view()
s.pop()
s.view()
s.pop()
s.view()


class Node:
	def __init__(self,data):
		self.data = data
		self.next = None

class LinkedList:
    def __init__(self):
        self.start=None
    def insertlast(self,element):
       newNode = Node(element)
       if self.start==None:
        self.start=newNode
       else:
        temp = self.start
        while temp.next!=None:
            temp = temp.next
        temp.next=newNode
    def deletefirst(self):
        if self.start==None:
            print("Linkrd list is empty so can not delete")
        else:
           temp = self.start
           self.start=self.start.next
    def view(self):
        if self.start==None:
           print("Linked list is empty")
        else:
           temp = self.start
           while temp!=None:
             print(temp.data,end=" ")
             temp=temp.next

mylist = LinkedList()
mylist.view()
mylist.deletefirst()
mylist.insertlast(45)
mylist.insertlast(45)
mylist.insertlast(45)
mylist.view()


class Node:
	def __init__(self,data):
		self.data = data
		self.next = None

class LinkedList:
    def __init__(self):
        self.start=None
    def insertlast(self):
       element= int(input("please enter no "))
       newNode = Node(element)
       if self.start==None:
        self.start=newNode
       else:
        temp = self.start
        while temp.next!=None:
            temp = temp.next
        temp.next=newNode
    def deletefirst(self):
        if self.start==None:
            print("Linkrd list is empty so can not delete")
        else:
           temp = self.start
           self.start=self.start.next
    def view(self):
        if self.start==None:
           print("Linked list is empty")
        else:
           temp = self.start
           while temp!=None:
             print(temp.data,end=" ")
             temp=temp.next
mylist = LinkedList()
mylist.view()
mylist.deletefirst()
mylist.insertlast()
mylist.insertlast()
mylist.insertlast()
mylist.view()
mylist.deletefirst()
mylist.deletefirst()
mylist.deletefirst()
print()
mylist.view()
