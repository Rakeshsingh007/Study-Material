-----------------------------------------------------------------------------------
								BinarySearch
-----------------------------------------------------------------------------------

def BinarySearch(list,ele):
   lower = 0
   upper = len(list)-1
   while lower<=upper:
       mid = (lower + upper) // 2
       if list[mid] == ele:
           return mid
       else:
           if list[mid]>ele:
                upper=mid-1
           else:
                lower=mid+1
   return -1

print(BinarySearch([1,2,3,4,5,7,8,9,],69))

Worst case: Θ(log n).
Best case: Θ(1).
Average case for a random array: Θ(log n)
"Almost sorted" case: Θ(n).

-----------------------------------------------------------------------------------
								InsertionSort
-----------------------------------------------------------------------------------

def InsertionSort(list):
    for index in range(1,len(list)):
        while list[index]<list[index-1] and index>0:
            list[index],list[index-1]=list[index-1],list[index]
            index=index-1
    return list

print(InsertionSort([64,25,12,22,100,5,6,333,4,2,5,6,1,2,3,4,6,3,9,1,3,5,3,5,11]))

Worst case: Θ(n2).
Best case: Θ(n).
Average case for a random array: Θ(n2)
"Almost sorted" case: Θ(n).

-----------------------------------------------------------------------------------
								BubbleSort
-----------------------------------------------------------------------------------

def BubbleSort(list):
	flag = False
	for i in range(len(list) - 1):
		for j in range(len(list) - 1 - i):
			if list[j]>list[j+1]:
				list[j],list[j + 1] =list[j+1],list[j]
				flag = True
		if not flag:
			break
	return list
print(BubbleSort([1,12,3,4,5]))

-----------------------------------------------------------------------------------
								SelectionSort
-----------------------------------------------------------------------------------

def SelectionSort(list):
	for i in range(len(list)-1):
		minindex = i
		for j in range(i+1,len(list)):
			if list[j]<list[minindex]:
				minindex=j
		if minindex!=i:
			list[i],list[minindex]=list[minindex],list[i]
	return list
print(SelectionSort([1,2,4,1,3,5,32,3,4,2]))

-----------------------------------------------------------------------------------
								Stack
-----------------------------------------------------------------------------------

class Stack:
    def __init__(self):
        self.__stack = deque()

    def push(self, item):
        self.__stack.append(item)

    def pop(self):
        if len(self.__stack) > 0:
            return self.__stack.pop()
        else:
            return "stack is empty!!!!"

    def __str__(self):
        for item in self.__stack:
            print(item, end="-->")

-----------------------------------------------------------------------------------
								Queue
-----------------------------------------------------------------------------------

class Queue:
    def __init__(self):
        self.__queue = deque()

    def push(self, item):
        self.__queue.appendleft(item)

    def pop(self):
        if len(self.__queue) > 0:
            return self.__queue.pop()
        else:
            return "queue is empty!!!!"

    def __str__(self):
        for item in self.__queue:
            print(item, end="-->")

-----------------------------------------------------------------------------------
								LinkedList
-----------------------------------------------------------------------------------

class Node:
    def __init__(self, data=None, next=None):
        self.data = data
        self.next = next


class LinkedList:
    def __init__(self):
        self.head = None

    def insertAtLast(self, data):
        if not self.head:
            self.head = Node(data)
        elif not self.head.next:
            self.head.next = Node(data)
        else:
            cur_node = self.head
            while cur_node.next:
                cur_node = cur_node.next
            cur_node.next = Node(data)

    def deleteAtLast(self):
        if not self.head:
            print("linked list is empty")
        elif not self.head.next:
            self.head = None
        else:
            cur_node = self.head
            while cur_node.next.next:
                cur_node = cur_node.next
            cur_node.next = None

    def insertAtFirst(self, data):
        if self.head:
            self.head = Node(data, self.head)
        else:
            self.head = Node(data)

    def deleteAtFirst(self):
        if not self.head:
            print("linked list is empty")
        elif not self.head.next:
            self.head = None
        else:
            self.head = self.head.next

    def __repr__(self):
        if not self.head:
            return "linked list is empty"
        else:
            iter = self.head
            while iter:
                print_str = print_str+str(iter.data)+"-->"
                iter = iter.next
            return print_str


if __name__ == '__main__':
    list_obj = LinkedList()
    list_obj.insertAtFirst(1)
    list_obj.deleteAtFirst()
    list_obj.insertAtLast(2)
    list_obj.deleteAtLast()
    print(list_obj)
	
-----------------------------------------------------------------------------------
								Tree
-----------------------------------------------------------------------------------
class tree:
    def __init__(self,data):
        self.data = data
        self.left = None
        self.right = None

    def add_child(self, data):
        if self.data == data:
            return
        if self.data > data:
            if self.left:
                self.left.add_child(data)
            else:
                self.left = tree(data)
        else:
            if self.right:
                self.right.add_child(data)
            else:
                self.right = tree(data)

    def in_order_traversal(self):
        output_list = list()
        # left tree travers
        if self.left:
            output_list += self.left.in_order_traversal()

        output_list.append(self.data)

        if self.right:
            output_list += self.right.in_order_traversal()
        return output_list

    def search(self, elem):
        if self.data == elem:
            return True
        if self.data>elem:
            if self.left:
                return self.left.search(elem)
            else:
                return False
        else:
            if self.right:
                return self.right.search(elem)
            else:
                return False

    def min(self):
        cur_node = self
        while cur_node.left:
            cur_node = cur_node.left
        return cur_node.data

    def max(self):
        cur_node = self
        while cur_node.right:
            cur_node = cur_node.right
        return cur_node.data

if __name__ == "__main__":
    def create_tree(list_elem):
        root = tree(1)
        for item in list_elem:
            root.add_child(item)
        return root

    obj = create_tree([1,2,3,4,5,6,1,4,24])
    print(obj.in_order_traversal())
    print(obj.search(34))
    print(obj.min())
    print(obj.max())
